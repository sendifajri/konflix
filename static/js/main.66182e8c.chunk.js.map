{"version":3,"sources":["layouts/main.tsx","App.tsx","reportWebVitals.ts","utils/api.ts","actions/movieActions.ts","reducers/movieReducer.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Content","Layout","MainLayout","children","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","process","GET_MOVIES","GET_MORE_MOVIES","GET_MOVIES_DETAIL","SET_FILTERS","MOVIE_INITIAL_STATE","Search","status","filters","page","search","MOVIE_DETAIL_INITIAL_STATE","Actors","Awards","BoxOffice","Country","DVD","Director","Genre","Language","Metascore","Plot","Poster","Production","Rated","Response","Runtime","Title","Type","Website","Writer","Year","imdbID","imdbRating","imdbVotes","Ratings","rootReducer","combineReducers","moviesState","state","action","type","data","movieDetailState","logger","createLogger","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAGQA,EAAYC,IAAZD,QAeOE,EAVI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SACpB,OACE,cAAC,IAAD,UACE,cAACH,EAAD,CAASI,UAAU,wBAAnB,SACE,qBAAKA,UAAU,yBAAf,SAAyCD,S,QCmBlCE,MAnBf,WACE,OACE,cAAC,IAAD,UACE,cAAC,EAAD,UAUE,iDCXOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qDCPM,UADIQ,0BACJ,mBAFGA,YAAhB,ICkBMC,EAAa,aACbC,EAAkB,kBAClBC,EAAoB,oBACpBC,EAAc,cCYdC,EAAkC,CAC7CC,OAAQ,GACRC,OAAQ,UACRC,QAAS,CACPC,KAAM,EACNC,OAAQ,KAgECC,EAA2C,CACtDC,OAAQ,GACRC,OAAQ,GACRC,UAAW,GACXC,QAAS,GACTC,IAAK,GACLC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,KAAM,GACNC,OAAQ,GACRC,WAAY,GACZC,MAAO,GACPC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,OAAQ,GACRC,WAAY,GACZC,UAAW,GACXC,QAAS,GACT5B,OAAQ,WC5GK6B,EANKC,YAAgB,CAClCC,YD4BmB,WAGf,IAFJC,EAEG,uDAFKlC,EACRmC,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKrC,EACH,OAAO,2BACFmC,GADL,IAEE/B,QAASgC,EAAOE,KAAKlC,UAEzB,KAAKP,EACH,OAAO,2BACFsC,GADL,IAEEjC,OAAQkC,EAAOE,KAAKpC,OACpBC,OAAQiC,EAAOE,KAAKnC,SAExB,KAAKL,EACH,OAAKqC,EAAMjC,QAAWkC,EAAOE,KAAKpC,OAG3B,2BACFiC,GADL,IAEEjC,OAAO,GAAD,mBAAMiC,EAAMjC,QAAZ,YAAuBkC,EAAOE,KAAKpC,SACzCC,OAAQiC,EAAOE,KAAKnC,SALbgC,EAQX,QACE,OAAOA,ICtDXI,iBDmHyB,WAGrB,IAFJJ,EAEG,uDAFmB5B,EACtB6B,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKtC,EACH,OAAO,2BACFoC,GACAC,EAAOE,MAEd,QACE,OAAOH,MExIPK,EAASC,yBAGAC,EAFDC,YAAYX,EAAaY,YAAgBC,IAAOL,ICE9DM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1B/D,K","file":"static/js/main.66182e8c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Layout } from \"antd\";\n\nconst { Content } = Layout;\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nconst MainLayout = ({ children }: MainLayoutProps) => {\n  return (\n    <Layout>\n      <Content className=\"site-layout container\">\n        <div className=\"site-layout-background\">{children}</div>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default MainLayout;\n","import React from \"react\";\nimport MainLayout from \"./layouts/main\";\nimport Home from \"./pages/home\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport MovieDetail from \"./pages/movieDetail\";\nimport PreviewPoster from \"./pages/movieDetail/previewPoster\";\n\nexport interface MovieDetailParamTypes {\n  id: string;\n  search: string;\n}\n\nfunction App() {\n  return (\n    <Router>\n      <MainLayout>\n        {/* <Route path=\"/\" exact>\n          <Home />\n        </Route>\n        <Route path=\"/:id/:search\">\n          <MovieDetail />\n        </Route>\n        <Route path=\"/:id/:search/preview\">\n          <PreviewPoster />\n        </Route> */}\n        <div>hiii test</div>\n      </MainLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const API_KEY = process.env.REACT_APP_API_KEY;\nexport const API_HOST = process.env.REACT_APP_API_HOST;\nexport const API_URL = `${API_HOST}?apikey=${API_KEY}`;\n","import { dispatchTypes, getAction } from \"./getActions\";\nimport {\n  MovieState,\n  MOVIE_INITIAL_STATE,\n  MOVIE_DETAIL_INITIAL_STATE,\n  IMovieDetail,\n} from \"../reducers/movieReducer\";\nimport { API_URL } from \"../utils/api\";\n\nexport interface IMovieActions {\n  search: string;\n  page: number;\n}\n\nexport interface IMovieDetailActions {\n  id: string;\n}\n\nexport const GET_MOVIES = \"GET_MOVIES\";\nexport const GET_MORE_MOVIES = \"GET_MORE_MOVIES\";\nexport const GET_MOVIES_DETAIL = \"GET_MOVIES_DETAIL\";\nexport const SET_FILTERS = \"SET_FILTERS\";\n\nexport const setFilters = ({ search, page }: IMovieActions) => (\n  dispatch: any\n) => {\n  dispatch({\n    type: \"SET_FILTERS\",\n    data: {\n      filters: {\n        search,\n        page,\n      },\n    },\n  });\n};\n\nexport const movieActions = ({ search, page }: IMovieActions) => (\n  dispatch: (\n    arg: (dispatch: dispatchTypes<MovieState>) => void\n  ) => dispatchTypes<MovieState>\n) => {\n  dispatch(setFilters({ search, page }));\n  dispatch(\n    getAction<MovieState>({\n      url: `${API_URL}&s=${search}&page=${page}`,\n      nameType: GET_MOVIES,\n      initialValue: MOVIE_INITIAL_STATE,\n    })\n  );\n};\n\nexport const moreMoviesAction = ({ search, page }: IMovieActions) => (\n  dispatch: (\n    arg: (dispatch: dispatchTypes<MovieState>) => void\n  ) => dispatchTypes<MovieState>\n) => {\n  dispatch(setFilters({ search, page }));\n  dispatch(\n    getAction<MovieState>({\n      url: `${API_URL}&s=${search}&page=${page}`,\n      nameType: GET_MORE_MOVIES,\n      initialValue: MOVIE_INITIAL_STATE,\n    })\n  );\n};\n\nexport const movieDetailActions = ({ id }: IMovieDetailActions) => (\n  dispatch: (\n    arg: (dispatch: dispatchTypes<IMovieDetail>) => void\n  ) => dispatchTypes<IMovieDetail>\n) => {\n  dispatch(movieDetailActionsLoading());\n  dispatch(\n    getAction<IMovieDetail>({\n      url: `${API_URL}&i=${id}`,\n      nameType: GET_MOVIES_DETAIL,\n      initialValue: MOVIE_DETAIL_INITIAL_STATE,\n    })\n  );\n};\n\nexport const movieDetailActionsLoading = () => (\n  dispatch: (arg: { type: string; data: IMovieDetail }) => void\n) => {\n  dispatch({\n    type: GET_MOVIES_DETAIL,\n    data: { ...MOVIE_DETAIL_INITIAL_STATE, status: \"LOADING\" },\n  });\n};\n\nexport const movieActionsLoading = () => (\n  dispatch: (arg: { type: string; data: MovieState }) => void\n) => {\n  dispatch({\n    type: GET_MOVIES,\n    data: { ...MOVIE_INITIAL_STATE, status: \"LOADING\" },\n  });\n};\n","import { IReducerAction, STATUS } from \".\";\nimport {\n  GET_MORE_MOVIES,\n  GET_MOVIES,\n  GET_MOVIES_DETAIL,\n  SET_FILTERS,\n} from \"../actions/movieActions\";\n\n// MOVIE\nexport interface IMovie {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: string;\n  Poster: string;\n}\n\nexport type MovieState = {\n  Search?: IMovie[];\n  status?: STATUS;\n  filters: {\n    page: number;\n    search: string;\n  };\n};\n\nexport type MovieAction = {\n  type: string;\n  movies: IMovie[];\n};\n\nexport type MovieDispatchType = (args: MovieAction) => MovieAction;\n\nexport const MOVIE_INITIAL_STATE: MovieState = {\n  Search: [],\n  status: \"LOADING\",\n  filters: {\n    page: 1,\n    search: \"\",\n  },\n};\n\nconst movieReducer = (\n  state = MOVIE_INITIAL_STATE,\n  action: IReducerAction<MovieState>\n) => {\n  switch (action.type) {\n    case SET_FILTERS:\n      return {\n        ...state,\n        filters: action.data.filters,\n      };\n    case GET_MOVIES:\n      return {\n        ...state,\n        Search: action.data.Search,\n        status: action.data.status,\n      };\n    case GET_MORE_MOVIES: {\n      if (!state.Search || !action.data.Search) {\n        return state;\n      }\n      return {\n        ...state,\n        Search: [...state.Search, ...action.data.Search],\n        status: action.data.status,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\n// END MOVIE\n\n// MOVIE DETAIL\n\nexport interface IMovieDetail extends IMovie {\n  Actors: string;\n  Awards: string;\n  BoxOffice: string;\n  Country: string;\n  DVD: string;\n  Director: string;\n  Genre: string;\n  Language: string;\n  Metascore: string;\n  Plot: string;\n  Poster: string;\n  Production: string;\n  Rated: string;\n  Ratings: { Source: string; Value: string }[];\n  Response: string;\n  Runtime: string;\n  Website: string;\n  Writer: string;\n  imdbRating: string;\n  imdbVotes: string;\n  status?: STATUS;\n}\n\nexport const MOVIE_DETAIL_INITIAL_STATE: IMovieDetail = {\n  Actors: \"\",\n  Awards: \"\",\n  BoxOffice: \"\",\n  Country: \"\",\n  DVD: \"\",\n  Director: \"\",\n  Genre: \"\",\n  Language: \"\",\n  Metascore: \"\",\n  Plot: \"\",\n  Poster: \"\",\n  Production: \"\",\n  Rated: \"\",\n  Response: \"\",\n  Runtime: \"\",\n  Title: \"\",\n  Type: \"\",\n  Website: \"\",\n  Writer: \"\",\n  Year: \"\",\n  imdbID: \"\",\n  imdbRating: \"\",\n  imdbVotes: \"\",\n  Ratings: [],\n  status: \"LOADING\",\n};\n\nconst movieDetailReducer = (\n  state: IMovieDetail = MOVIE_DETAIL_INITIAL_STATE,\n  action: IReducerAction<IMovieDetail>\n) => {\n  switch (action.type) {\n    case GET_MOVIES_DETAIL:\n      return {\n        ...state,\n        ...action.data,\n      };\n    default: {\n      return state;\n    }\n  }\n};\n\n// END MOVIE DETAIL\n\nexport { movieReducer, movieDetailReducer };\n","import { combineReducers } from \"redux\";\nimport { movieDetailReducer, movieReducer } from \"./movieReducer\";\n\n// ASYNC STATUS TYPES;\nexport type STATUS = \"LOADING\" | \"DONE\" | \"ERROR\";\n\n// Dynamic reducer action types\nexport type IReducerAction<IData> = {\n  type: string;\n  data: IData;\n};\n\n// combine all reducers\nconst rootReducer = combineReducers({\n  moviesState: movieReducer,\n  movieDetailState: movieDetailReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"./reducers\";\n\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.less\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}